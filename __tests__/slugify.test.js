// Generated by Qodo Gen

const { slugify } = require('../lib/skelo-utils');


describe('slugify', () => {

    // Converts a string to lowercase and replaces spaces with hyphens
    it('should convert string to lowercase and replace spaces with hyphens', () => {
      const input = 'Hello World';
      const expectedOutput = 'hello-world';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Handles strings with only special characters
    it('should return an empty string when input contains only special characters', () => {
      const input = '!@#$%^&*()';
      const expectedOutput = '';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Removes special characters and replaces them with the specified replacement
    it('should replace special characters with specified replacement', () => {
      const input = 'Hello@World!';
      const expectedOutput = 'hello-world';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Maintains existing hyphens in the string.
    it('should maintain existing hyphens in the string', () => {
      const input = 'hello-world';
      const expectedOutput = 'hello-world';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Replaces spaces between words with hyphens.
    it('should replace spaces with hyphens in a string', () => {
      const input = 'This is a test';
      const expectedOutput = 'this-is-a-test';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Collapses multiple replacement characters into a single one
    it('should collapse multiple replacement characters into a single one', () => {
      const input = 'Hello---World';
      const expectedOutput = 'hello-world';
      const result = slugify(input, '-');
      expect(result).toBe(expectedOutput);
    });

    // Ignores non-space special characters in this step.
    it('should ignore non-space special characters when creating slug', () => {
      const input = 'Hello, World!';
      const expectedOutput = 'hello-world';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Detects consecutive replacement characters in the string.
    it('should collapse multiple replacement characters into a single one', () => {
      const input = 'Hello--World';
      const expectedOutput = 'hello-world';
      const result = slugify(input, '-');
      expect(result).toBe(expectedOutput);
    });

    // Replaces sequences of replacements with a single instance.
    it('should replace multiple replacement characters with a single one', () => {
      const input = 'Hello---World';
      const expectedOutput = 'hello-world';
      const result = slugify(input);
      expect(result).toBe(expectedOutput);
    });

    // Ensures no duplicate replacements remain in the slug.
    it('should collapse multiple replacement characters into a single one', () => {
      const input = 'Hello---World';
      const expectedOutput = 'hello-world';
      const result = slugify(input, '-');
      expect(result).toBe(expectedOutput);
    });

    // Handles edge cases with multiple replacements at string boundaries.
    it('should handle multiple replacements at the start and end of the string', () => {
      const input = '---Hello---World---';
      const expectedOutput = 'hello-world';
      const result = slugify(input, '-');
      expect(result).toBe(expectedOutput);
    });
});
