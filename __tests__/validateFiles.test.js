// Generated by Qodo Gen

const { validateFiles } = require('../lib/skelo-utils');
const yaml  = require('js-yaml');
const fs = require('fs');

describe('validateFiles', () => {
    // // Validate multiple YAML files against a given schema successfully
    // it('should validate multiple YAML files successfully when schema and files are correct', () => {
    //     const mockSchema = { type: 'object', properties: { name: { type: 'string' } } };
    //     const mockYamlContent = { name: 'Test' };
    //     jest.mock('fs', () => ({
    //         readFileSync: jest.fn((path) => {
    //             if (path === 'validSchema.json') return JSON.stringify(mockSchema);
    //             return 'name: Test';
    //         })
    //     }));
    //     jest.mock('yaml', () => ({
    //         safeLoad: jest.fn(() => mockYamlContent)
    //     }));
    //     const filenames = ['file1.yaml', 'file2.yaml'];
    //     const options = { schema: 'validSchema.json' };
    //     const result = validateFiles(filenames, options);
    //     expect(result.validFiles).toEqual(filenames);
    //     expect(result.invalidFiles).toEqual({});
    // });

    // // Handle empty filenames array gracefully
    // it('should return empty results when filenames array is empty', () => {
    //     const filenames = [];
    //     const options = { schema: 'validSchema.json' };
    //     const result = validateFiles(filenames, options);
    //     expect(result.validFiles).toEqual([]);
    //     expect(result.invalidFiles).toEqual({});
    // });

    // // Process large number of files efficiently
    // it('should process a large number of YAML files efficiently when schema is valid', () => {
    //     const mockSchema = { type: 'object', properties: { name: { type: 'string' } } };
    //     const mockYamlContent = { name: 'Test' };
    //     jest.mock('fs', () => ({
    //         readFileSync: jest.fn((path) => {
    //             if (path === 'validSchema.json') return JSON.stringify(mockSchema);
    //             return 'name: Test';
    //         })
    //     }));
    //     jest.mock('yaml', () => ({
    //         safeLoad: jest.fn(() => mockYamlContent)
    //     }));
    //     const filenames = Array.from({ length: 1000 }, (_, i) => `file${i}.yaml`);
    //     const options = { schema: 'validSchema.json' };
    //     const result = validateFiles(filenames, options);
    //     expect(result.validFiles).toEqual(filenames);
    //     expect(result.invalidFiles).toEqual({});
    // });
});
