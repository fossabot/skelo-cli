// Generated by Qodo Gen

const { trimSlashesAndPeriods } = require('../lib/skelo-utils');


describe('trimSlashesAndPeriods', () => {

    // Removes leading and trailing slashes from a string
    it('should remove leading and trailing slashes when present', () => {
      const input = '/example/path/';
      const expectedOutput = 'example/path';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Empty string input returns an empty string
    it('should return an empty string when input is empty', () => {
      const input = '';
      const expectedOutput = '';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Removes leading and trailing periods from a string
    it('should remove leading and trailing periods when present', () => {
      const input = '.example.path.';
      const expectedOutput = 'example.path';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Handles strings with mixed slashes and periods correctly
    it('should remove leading and trailing slashes and periods when present', () => {
      const input = './example/path/.';
      const expectedOutput = 'example/path';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Returns the original string if no removable characters are present
    it('should return the original string when no slashes or periods are present', () => {
      const input = 'examplePath';
      const expectedOutput = 'examplePath';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // String with only removable characters returns an empty string
    it('should return an empty string when input contains only slashes and periods', () => {
      const input = './\\/.';
      const expectedOutput = '';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // String with removable characters only at the start or end
    it('should remove leading and trailing periods and slashes when present', () => {
      const input = './example/path/.';
      const expectedOutput = 'example/path';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // String with consecutive removable characters at the start and end
    it('should remove leading and trailing slashes and periods when present', () => {
      const input = './example/path/.';
      const expectedOutput = 'example/path';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Handles strings with special characters other than slashes and periods
    it('should not remove special characters other than slashes and periods', () => {
      const input = '*example@path#';
      const expectedOutput = '*example@path#';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

    // Processes strings with whitespace correctly
    it('should remove leading and trailing slashes and periods with surrounding whitespace', () => {
      const input = '  /example.path.  ';
      const expectedOutput = 'example.path';
      const result = trimSlashesAndPeriods(input.trim());
      expect(result).toBe(expectedOutput);
    });

    // Handles very long strings efficiently
    it('should handle very long strings without performance issues', () => {
      const input = '/'.repeat(10000) + 'example' + '\\'.repeat(10000);
      const expectedOutput = 'example';
      const result = trimSlashesAndPeriods(input);
      expect(result).toBe(expectedOutput);
    });

});
