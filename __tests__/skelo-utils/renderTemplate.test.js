// Generated by Qodo Gen

const { renderTemplate } = require('../../lib/skelo-utils');

describe('renderTemplate', () => {

    // Render template with valid template name, data object and options
    it('should render template successfully when valid arguments are provided', () => {
      const fs = require('fs');
      const Handlebars = require('handlebars');

      const mockTemplateContent = '<h1>{{title}}</h1>';
      const mockCompiledTemplate = jest.fn().mockReturnValue('<h1>Test Title</h1>');

      jest.spyOn(fs, 'existsSync').mockReturnValue(true);
      jest.spyOn(fs, 'readFileSync').mockReturnValue(mockTemplateContent);
      jest.spyOn(Handlebars, 'compile').mockReturnValue(mockCompiledTemplate);

      const templateName = 'test-template';
      const data = { title: 'Test Title' };
      const options = {
        templateExtension: 'hbs',
        templates: '/templates'
      };

      const result = renderTemplate(templateName, data, options);

      expect(fs.existsSync).toHaveBeenCalledWith('/templates/test-template.hbs');
      expect(fs.readFileSync).toHaveBeenCalledWith('/templates/test-template.hbs', 'utf-8');
      expect(Handlebars.compile).toHaveBeenCalledWith(mockTemplateContent);
      expect(mockCompiledTemplate).toHaveBeenCalledWith(data);
      expect(result).toBe('<h1>Test Title</h1>');
    });

    // Pass null as options parameter
    it('should throw error when options is null', () => {
      const templateName = 'test-template';
      const data = { title: 'Test Title' };
      const options = null;

      expect(() => {
        renderTemplate(templateName, data, options);
      }).toThrow('renderTemplate: options was null.');
    });
});
